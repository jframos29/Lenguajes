/* Generated By:JavaCC: Do not edit this line. LRP.java */
package uniandes.teolen.parserJavaCC.LRP;

public class LRP implements LRPConstants {
  public static void main(String args []) throws ParseException
  {
    LRP parser = new LRP(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Ingrese una expresion de LRP o punto y coma en caso de querer abandonar el programa.");
      try
      {
        switch (parser.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          System.exit(-1);
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  final public int one_line() throws ParseException {
    trace_call("one_line");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case M:
      case 19:
        sum();
    {if (true) return 0;}
        break;
      case 18:
        jj_consume_token(18);
    {if (true) return 1;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("one_line");
    }
  }

  final public void sum() throws ParseException {
    trace_call("sum");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        variable();
      }
      label_2:
      while (true) {
        maquina();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      label_3:
      while (true) {
        jj_consume_token(SPAWN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPAWN:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
    } finally {
      trace_return("sum");
    }
  }

  final public void variable() throws ParseException {
    trace_call("variable");
    try {
      jj_consume_token(19);
      jj_consume_token(NAME);
      jj_consume_token(20);
      valor();
      jj_consume_token(21);
    } finally {
      trace_return("variable");
    }
  }

  final public void valor() throws ParseException {
    trace_call("valor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        jj_consume_token(VALUE);
        break;
      case NAME:
        jj_consume_token(NAME);
        break;
      case CONSTANT:
        jj_consume_token(CONSTANT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("valor");
    }
  }

  final public void maquina() throws ParseException {
    trace_call("maquina");
    try {
      jj_consume_token(M);
      jj_consume_token(NAME);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        estado();
      }
      cuerpoItem();
      jj_consume_token(22);
    } finally {
      trace_return("maquina");
    }
  }

  final public void estado1() throws ParseException {
    trace_call("estado1");
    try {
      cuerpoItem();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        estado();
      }
    } finally {
      trace_return("estado1");
    }
  }

  final public void estado2() throws ParseException {
    trace_call("estado2");
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        estado();
      }
      cuerpoItem();
    } finally {
      trace_return("estado2");
    }
  }

  final public void cuerpoItem() throws ParseException {
    trace_call("cuerpoItem");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        label_7:
        while (true) {
          estado();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 26:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
        }
        break;
      case 23:
        label_8:
        while (true) {
          evento();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 23:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_8;
          }
        }
        break;
      case 19:
        label_9:
        while (true) {
          variable();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 19:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_9;
          }
        }
        break;
      case ONTIME:
      case ON:
        label_10:
        while (true) {
          transicion();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONTIME:
          case ON:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_10;
          }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("cuerpoItem");
    }
  }

  final public void transicion() throws ParseException {
    trace_call("transicion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        on();
        break;
      case ONTIME:
        ontime();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("transicion");
    }
  }

  final public void on() throws ParseException {
    trace_call("on");
    try {
      jj_consume_token(ON);
      jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLECHA:
      case NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          jj_consume_token(NAME);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(FLECHA);
        break;
      case WILD:
        jj_consume_token(WILD);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NAME);
      jj_consume_token(22);
    } finally {
      trace_return("on");
    }
  }

  final public void ontime() throws ParseException {
    trace_call("ontime");
    try {
      jj_consume_token(ONTIME);
      time();
      jj_consume_token(NAME);
      jj_consume_token(FLECHA);
      jj_consume_token(NAME);
      jj_consume_token(22);
    } finally {
      trace_return("ontime");
    }
  }

  final public void time() throws ParseException {
    trace_call("time");
    try {
      jj_consume_token(NAME);
      jj_consume_token(CONSTANT);
    } finally {
      trace_return("time");
    }
  }

  final public void evento() throws ParseException {
    trace_call("evento");
    try {
      jj_consume_token(23);
      jj_consume_token(NAME);
      call();
      jj_consume_token(22);
    } finally {
      trace_return("evento");
    }
  }

  final public void call() throws ParseException {
    trace_call("call");
    try {
      jj_consume_token(24);
      proof();
      jj_consume_token(25);
    } finally {
      trace_return("call");
    }
  }

  final public void proof() throws ParseException {
    trace_call("proof");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        jj_consume_token(NAME);
        break;
      case PROOF:
        jj_consume_token(PROOF);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("proof");
    }
  }

  final public void estado() throws ParseException {
    trace_call("estado");
    try {
      jj_consume_token(26);
      jj_consume_token(NAME);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
        case 28:
        case 29:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        accion();
      }
      jj_consume_token(22);
    } finally {
      trace_return("estado");
    }
  }

  final public void accion() throws ParseException {
    trace_call("accion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        call();
        jj_consume_token(22);
        break;
      case 28:
        jj_consume_token(28);
        call();
        jj_consume_token(22);
        break;
      case 29:
        jj_consume_token(29);
        call();
        jj_consume_token(22);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("accion");
    }
  }

  /** Generated Token Manager. */
  public LRPTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0400,0x80000,0x400,0x20,0xc800,0x4000000,0x4000000,0x4000000,0x4000000,0x800000,0x80000,0x300,0x4880300,0x300,0x8000,0x80c0,0xa000,0x38000000,0x38000000,};
   }

  /** Constructor with InputStream. */
  public LRP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LRP(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LRPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LRP(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LRPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LRP(LRPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LRPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
